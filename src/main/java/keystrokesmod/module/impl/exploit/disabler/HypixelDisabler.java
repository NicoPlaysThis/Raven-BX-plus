package keystrokesmod.module.impl.exploit.disabler;

import keystrokesmod.event.JumpEvent;
import keystrokesmod.event.PreMotionEvent;
import keystrokesmod.event.ReceivePacketEvent;
import keystrokesmod.event.SendPacketEvent;
import keystrokesmod.module.impl.exploit.Disabler;
import keystrokesmod.module.impl.other.SlotHandler;
import keystrokesmod.module.setting.impl.SubMode;
import keystrokesmod.utility.PacketUtils;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0EPacketClickWindow;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.jetbrains.annotations.NotNull;

public class HypixelDisabler extends SubMode<Disabler> {
    private int lastOnGroundTicks = 0;
    private int curOnGroundTicks = 0;

    public HypixelDisabler(String name, @NotNull Disabler parent) {
        super(name, parent);
    }

    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onSendPacket(@NotNull SendPacketEvent event) {
        if (event.getPacket() instanceof C0BPacketEntityAction
                && ((C0BPacketEntityAction) event.getPacket()).getAction() == C0BPacketEntityAction.Action.OPEN_INVENTORY) {
            event.setCanceled(true);
        }
    }

    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onPreMotion(@NotNull PreMotionEvent event) {
        event.setSprinting(false);
        if (mc.thePlayer.onGround)
            curOnGroundTicks++;
    }

    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onReceivePacket(@NotNull ReceivePacketEvent event) {
        if (event.getPacket() instanceof S08PacketPlayerPosLook) {
            if (mc.thePlayer.isUsingItem()) {
                if (mc.thePlayer.isBlocking()) {
                    PacketUtils.sendPacket(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN));
                } else {
                    mc.playerController.onStoppedUsingItem(mc.thePlayer);
                }
            }
        }
    }

    @SubscribeEvent(priority = EventPriority.HIGHEST)
    public void onJump(JumpEvent event) {
        if (lastOnGroundTicks < 4 && curOnGroundTicks < 4) {
            event.setCanceled(true);
        } else {
            lastOnGroundTicks = curOnGroundTicks;
        }
    }
}
