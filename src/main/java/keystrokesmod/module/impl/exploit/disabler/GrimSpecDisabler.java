package keystrokesmod.module.impl.exploit.disabler;

import keystrokesmod.event.ReceivePacketEvent;
import keystrokesmod.module.impl.client.Notifications;
import keystrokesmod.module.impl.exploit.Disabler;
import keystrokesmod.module.setting.impl.ButtonSetting;
import keystrokesmod.module.setting.impl.SubMode;
import keystrokesmod.utility.PacketUtils;
import keystrokesmod.utility.Utils;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayClient;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.jetbrains.annotations.NotNull;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class GrimSpecDisabler extends SubMode<Disabler> {
    private final Queue<Packet<INetHandlerPlayClient>> delayedPackets = new ConcurrentLinkedQueue<>();
    private boolean delayed = false;

    private final ButtonSetting ver117;

    public GrimSpecDisabler(String name, @NotNull Disabler parent) {
        super(name, parent);
        this.registerSetting(ver117 = new ButtonSetting("1.17", false));
    }

    @Override
    public void onDisable() {
        if (Utils.nullCheck()) {
            delayedPackets.forEach(PacketUtils::receivePacketNoEvent);
        }

        delayedPackets.clear();
        delayed = false;
    }

    @SubscribeEvent
    public void onReceivePacket(ReceivePacketEvent event) {
        if (mc.thePlayer.ticksExisted < 20) {
            delayedPackets.clear();
            return;
        }

        if (event.getPacket() instanceof S08PacketPlayerPosLook) {
            if (mc.thePlayer.capabilities.allowFlying && !delayed) {
                delayed = true;
            } else if (delayed) {
                delayedPackets.add((Packet<INetHandlerPlayClient>) event.getPacket());
                Notifications.sendNotification(Notifications.NotificationTypes.WARN, "Flag detected! You may need to disable the Disabler");
            }
        }

        if (delayed) {
            if (event.getPacket() instanceof S32PacketConfirmTransaction) {
                delayedPackets.add((Packet<INetHandlerPlayClient>) event.getPacket());
                event.setCanceled(true);

                if (ver117.isToggled()) {
                    PacketUtils.sendPacket(new C0FPacketConfirmTransaction(0, (short) 0, true));
                }
            }
        }
    }
}
