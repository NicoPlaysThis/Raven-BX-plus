package keystrokesmod.module.impl.exploit.disabler;

import keystrokesmod.event.SendPacketEvent;
import keystrokesmod.module.impl.exploit.Disabler;
import keystrokesmod.module.setting.impl.ButtonSetting;
import keystrokesmod.module.setting.impl.SubMode;
import keystrokesmod.utility.packet.OutgoingPackets;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.jetbrains.annotations.NotNull;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomDisabler extends SubMode<Disabler> {
    private final ButtonSetting cancelOutgoingPacket;
//    private final ButtonSetting cancelIncomingPacket;
    private final Map<Class<?>, ButtonSetting> sendPackets;
//    private final Map<Class<? extends Packet<INetHandlerPlayClient>>, ButtonSetting> receivePackets;

    public CustomDisabler(String name, @NotNull Disabler parent) {
        super(name, parent);
        this.registerSetting(cancelOutgoingPacket = new ButtonSetting("Cancel outgoing packet", false));
//        this.registerSetting(cancelIncomingPacket = new ButtonSetting("Cancel incoming packet", false));

        List<Class<? extends Packet<INetHandlerPlayServer>>> outgoingPackets = OutgoingPackets.getOutgoingPackets();
        sendPackets = new HashMap<>(outgoingPackets.size());
        for (Class<? extends Packet<INetHandlerPlayServer>> packet : outgoingPackets) {
            ButtonSetting setting = new ButtonSetting(packet.getSimpleName(), false, cancelOutgoingPacket::isToggled);
            sendPackets.put(packet, setting);
            this.registerSetting(setting);
        }
    }

    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onSendPacket(SendPacketEvent event) {
        if (!cancelOutgoingPacket.isToggled()) return;

        Class<?> packetClass = event.getPacket().getClass();
        if (!sendPackets.containsKey(packetClass)) return;
        if (!sendPackets.get(packetClass).isToggled()) return;

        event.setCanceled(true);
    }
}
