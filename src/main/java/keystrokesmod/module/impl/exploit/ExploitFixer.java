package keystrokesmod.module.impl.exploit;

import keystrokesmod.event.ReceivePacketEvent;
import keystrokesmod.module.Module;
import keystrokesmod.module.impl.client.Notifications;
import keystrokesmod.module.setting.impl.ButtonSetting;
import keystrokesmod.module.setting.impl.SliderSetting;
import keystrokesmod.utility.Utils;
import net.minecraft.crash.CrashReport;
import net.minecraft.network.play.server.*;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.jetbrains.annotations.NotNull;

import java.util.Arrays;

public class ExploitFixer extends Module {
    private static ButtonSetting debug;
    public static ButtonSetting cancelCrash = null;
    private final ButtonSetting destroySelf;
    private final ButtonSetting explodeBypass;
    private final ButtonSetting explodePowerful;
    private final SliderSetting maxMotion;
    private final SliderSetting maxStrength;
    private final ButtonSetting fakeDeath;
    private final ButtonSetting gameStateCrash;
    private final ButtonSetting gameStateDemo;

    public ExploitFixer() {
        super("ExploitFixer", category.exploit);
        this.registerSetting(debug = new ButtonSetting("Debug", false));
        this.registerSetting(cancelCrash = new ButtonSetting("Cancel crash", false));
        this.registerSetting(destroySelf = new ButtonSetting("Destroy self", true));
        this.registerSetting(explodeBypass = new ButtonSetting("Explode bypass", true));
        this.registerSetting(explodePowerful = new ButtonSetting("Explode powerful", true));
        this.registerSetting(maxMotion = new SliderSetting("Max motion", 100, 10, 1000, 10, explodePowerful::isToggled));
        this.registerSetting(maxStrength = new SliderSetting("Max strength", 100, 10, 1000, 10, explodePowerful::isToggled));
        this.registerSetting(fakeDeath = new ButtonSetting("Fake death", false));
        this.registerSetting(gameStateCrash = new ButtonSetting("Game state crash", true));
        this.registerSetting(gameStateDemo = new ButtonSetting("Game state demo", true));
    }

    public static boolean onCrash(CrashReport crashReport) {
        if (ExploitFixer.cancelCrash != null && ExploitFixer.cancelCrash.isToggled()) {
            if (debug != null && debug.isToggled())
                Notifications.sendNotification(
                        Notifications.NotificationTypes.WARN,
                        "Client crash! (" + crashReport.getCrashCause().getClass().getSimpleName() + ")"
                );
            return true;
        }
        return false;
    }

    @SubscribeEvent
    public void onReceivePacket(@NotNull ReceivePacketEvent event) {
        if (event.getPacket() instanceof S13PacketDestroyEntities && destroySelf.isToggled()) {
            if (!Utils.nullCheck()) return;
            S13PacketDestroyEntities packet = (S13PacketDestroyEntities) event.getPacket();
            if (Arrays.stream(packet.getEntityIDs()).anyMatch(i -> i == mc.thePlayer.getEntityId())) {
                event.setCanceled(true);
                debug("Destroy self");
            }
        } else if (event.getPacket() instanceof S27PacketExplosion) {
            S27PacketExplosion packet = (S27PacketExplosion) event.getPacket();
            if (explodeBypass.isToggled() && packet.getStrength() == 0) {
                event.setCanceled(true);
                debug("Explode bypass");
            } else if (explodePowerful.isToggled()
                    && packet.func_149149_c() >= maxMotion.getInput()
                    || packet.func_149144_d() >= maxMotion.getInput()
                    || packet.func_149147_e() >= maxMotion.getInput()
                    || packet.getStrength() >= maxStrength.getInput()) {
                event.setCanceled(true);
                debug("Explode powerful");
            }
        } else if (event.getPacket() instanceof S19PacketEntityStatus && fakeDeath.isToggled()) {
            S19PacketEntityStatus packet = (S19PacketEntityStatus) event.getPacket();
            if (packet.getOpCode() == 3 && packet.getEntity(mc.theWorld) == mc.thePlayer) {
                event.setCanceled(true);
                debug("Fake death");
            }
        } else if (event.getPacket() instanceof S2BPacketChangeGameState) {
            S2BPacketChangeGameState packet = (S2BPacketChangeGameState) event.getPacket();
            if (gameStateCrash.isToggled() && (packet.getGameState() == 7 || packet.getGameState() == 8) && packet.func_149137_d() >= 100) {
                event.setCanceled(true);
                debug("Game state crash");
            } else if (gameStateDemo.isToggled() && packet.getGameState() == 5) {
                event.setCanceled(true);
                debug("Game state demo");
            }
        }
    }

    private void debug(String msg) {
        if (debug.isToggled())
            Notifications.sendNotification(Notifications.NotificationTypes.WARN, "Server send a invalid packet! (" + msg + ")");
    }
}
